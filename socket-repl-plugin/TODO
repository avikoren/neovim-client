TODO alpha
	[X] Move all of the socket repl stuff to a plugin project
	[X] Make buffer-get-text-async work, just test it at the repl
	[X] Get "eval-code" working
	[X] Figure out how to accumulate / display results in vim
		[X] append it all to a file
		[X] preferably a temp file (could be a lot of data)
		[X] `:ShowRepl`
			no vimscript, invoke a plugin function
			show the contents of the temp file in the current buffer
			make it autoread
	[X] Name vim functions correctly
	[X] create prod & debug plugin.vim
	[X] add debug switch (var) to socket-repl-plugin.clj
    [_] errors in the middle of a buffer
    can be lost - wrap in eval?
	[X] implement doc (word under cursor)
	[_] Pass host, port in connect
	[_] Update README
		[X] Move NVIM_LISTEN... stuff to a debug section
		[_] demo video
		[_] architecture diagram
			nvim<--msgpack/stdio-->plugin(jar)<--localhost:5555-->socketrepl

TODO next
	[_] Rather than explicit repl output logging, can we intercept
		channel
		stream implementation
	[X] Shut down the plugin if no input received for one minute
	[X] evaluate form under cursor

Goals
	-Not a proper nRepl plugin, primary use is as an thought exercise
	-Zero vimscript (plugin written in clojure)
	-Simplicity
		Ex:
			Don't modify behavior of stdio, stacktrace printing
			Append results to a "repl" buffer
		Code
			No nrepl (no request / response)
			No middleware
			No vimscript
			Clojure-only plugin
			All results displayed in one place
			One connection
	-Run repl side-by-side with editor
		Does not automatically start a repl
		Forces you to explicity connect
		One connection only `:call ConnectClojurePlugin(host, port)`
		Accessible from vim buffer `:call ShowClojurePluginRepl()`
	-Not a way of life
		Does not include paredit, syntax highlight, etc

Questions
	Figwheel cljs-repl support
