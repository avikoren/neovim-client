TODO alpha
	[X] Move all of the socket repl stuff to a plugin project
	[X] Make buffer-get-text-async work, just test it at the repl
	[X] Get "eval-code" working
	[X] Figure out how to accumulate / display results in vim
		[X] append it all to a file
		[X] preferably a temp file (could be a lot of data)
		[X] `:ShowRepl`
			no vimscript, invoke a plugin function
			show the contents of the temp file in the current buffer
			make it autoread
	[X] Name vim functions correctly
	[_] create prod & debug plugin.vim
		both should start the plugin the same way, w/ 
		a bash script that specifies JVM options
		eliminate lein
		don't use a jar yet, just java -cp clojure.jar <clj-file> if possible
	[_] add debug switch (var) to socket-repl-plugin.clj
	[_] implement doc (word under cursor)
	[_] Pass host, port in connect

TODO final
	[_] Rather than explicit repl output logging, can we intercept
		channel
		stream implementation
	[_] Shut down the plugin if no input received for one minute
	[X] evaluate form under cursor

Goals
	-Not a proper nRepl plugin, primary use is as an thought exercise
	-Zero vimscript (plugin written in clojure)
	-Simplicity
		Ex:
			Don't modify behavior of stdio, stacktrace printing
			Append results to a "repl" buffer
		Code
			No nrepl (no request / response)
			No middleware
			No vimscript
			Clojure-only plugin
			All results displayed in one place
			One connection
	-Run repl side-by-side with editor
		Does not automatically start a repl
		Forces you to explicity connect
		One connection only `:call ConnectClojurePlugin(host, port)`
		Accessible from vim buffer `:call ShowClojurePluginRepl()`
	-Not a way of life
		Does not include paredit, syntax highlight, etc

Questions
	Figwheel cljs-repl support

Usage/Installation
	if we ship jar, should be no install steps
	add command line args to your project, so it starts socket repl
	on :Connect specify port (and host) to connect to

Debugging notes
	vim
		rpcrequest(1, ...) <-- use channel 1, w/ tcp
		don't do rpcstart
	clj
		connect! add localhost 7777
		vim blocks if you make a synchronous call to clj which makes a sync
		call back to vim -- use async!

