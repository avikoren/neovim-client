TODO alpha
	[X] Move all of the socket repl stuff to a plugin project
	[X] Make buffer-get-text-async work, just test it at the repl
	[X] Get "eval-code" working
	[X] Figure out how to accumulate / display results in vim
		[X] append it all to a file
		[X] preferably a temp file (could be a lot of data)
		[X] `:ShowRepl`
			no vimscript, invoke a plugin function
			show the contents of the temp file in the current buffer
			make it autoread
	[X] Name vim functions correctly
	[X] create prod & debug plugin.vim
	[X] add debug switch (var) to socket-repl-plugin.clj
	[_] implement doc (word under cursor)
	[_] Pass host, port in connect
	[_] Update README
		Move NVIM_LISTEN... stuff to a debug section

TODO final
	[_] Rather than explicit repl output logging, can we intercept
		channel
		stream implementation
	[_] Shut down the plugin if no input received for one minute
	[X] evaluate form under cursor

Goals
	-Not a proper nRepl plugin, primary use is as an thought exercise
	-Zero vimscript (plugin written in clojure)
	-Simplicity
		Ex:
			Don't modify behavior of stdio, stacktrace printing
			Append results to a "repl" buffer
		Code
			No nrepl (no request / response)
			No middleware
			No vimscript
			Clojure-only plugin
			All results displayed in one place
			One connection
	-Run repl side-by-side with editor
		Does not automatically start a repl
		Forces you to explicity connect
		One connection only `:call ConnectClojurePlugin(host, port)`
		Accessible from vim buffer `:call ShowClojurePluginRepl()`
	-Not a way of life
		Does not include paredit, syntax highlight, etc
	-Architecture Diagram
		nvim <--msgpack/stdio--> plugin (jar) <--localhost:5555--> socket repl

Questions
	Figwheel cljs-repl support

Usage/Installation
	no other install outside of normal plugin (pathogen, vundle, etc)
		** except the rtp thing **
	add command line args to your project, so it starts socket repl
		-Dclojure.server.repl="{:port 5555 :accept clojure.core.server/repl}"
	on `:Connect` specify port (and host) to connect to
	split a pane, `:ReplLog`

Debugging notes
	vim
		start vim w/ NVIM_LISTEN_ADDRESS
		`:so` plugin/socket-repl.vim.debug script
	clj
		start plugin w/ `run.sh`
			this also starts a socket repl on 5555
		note: use async!
		: vim blocks if you make a synchronous call to clj which makes a sync
		: call back to vim -- use async!

