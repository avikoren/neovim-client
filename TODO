Versioning
	re: https://github.com/neovim/neovim/pull/5535
	re: https://github.com/neovim/neovim/pull/5386

	[X] an we start writing tests for these things?
		[X] We'd have to start an nvim --embed, and maybe specify the NVIM_... ? 
		[X] Then, we connect
		[X] Test version validation
		[X] Integration test
			-insert some text in current buffer
			-command split the a new buffer put some stuff in it
			-command switch back to the original buffer
			-get the text of current buffer

		Tough to figure out exactly how to test against multiple version of
		Neovim's API. For now, let's just do this basic test, and document
		the version of Neovim used.

	Following the philosophy described above, we need
		[X] Make the user specify required API level on `connect`

		[X] Change the api to one function `exec`, pass the op as the first
		arg, and then use varargs, or a collection of args.
			Implementing `exec` and `exec-async` should include
			version-supported? check, maybe assume nvim_command will always
			be supported.

		Switching strategies to just generating everything statically.
			[X] namespace will be neovim-client/api/<api-level>/...
			[X] store the api doc in resources
			[X] look at the api doc, find the minimum supported version,
			start there, make a pass for each version up to the max version
			[X] Change intern to defn
			[X] Spit each namespace to a file (for each version)
			[X] Fix 0/api/api.clj
			[X] Add namespace w/ require to codegen
			[X] redo tests

		[X] Remove existing code in nvim.clj
			[X] custom.clj -> 1/api_ext.clj, 1/api/buffer_ext.clj, etc
			[_] unit test each one, will give us some sort of test coverage
				[_] buffer-ext
				[_] api-ext
			of a "useful" or at least "used" set of functionality

		[_] Change the existing samples to use this, maybe only support one
		sample.

		[_] In the README, document which api_levels are supported, and
		which version of nvim was used to generate the code from

		[_] Make a `doc` function that basically does `ns-publics`

		[_] Update the docs, including video?
			In terms of the docs, we'll take a similar approach that other
			AWS client libs have taken, we'll steer them heavily toward
			the *actual* docs, and using `nvim-get-api-info`.

		[_] Tag the existing version, bump the version (project & github),
		and release.

		[_] Upgrade clojure socket repl to use it?
